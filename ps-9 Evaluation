;#|
;The code for the simple interpreter can be found here: Interpreter Code in text form. Notice that we have added this definition
;   (define (let? exp) (tag-check exp '*let))
;and included the following clause in the eval definition:
;   ((let? exp) (eval-let exp env))
;Your job is to write the procedure eval-let, which takes a *let expression and evaluates it. (We're calling this form *let rather than let* because let* is a valid special form of regular Scheme. Besides, it sounds like a Hollywood actress!). A *let expression has the form
;
;    (*let ((n1 e1)
;            ...
;           (nn en))
;      body)
;You may assume that body is a single expression.
;Please implement this procedure directly, by making a new environment and evaluating the body in that environment. 
;|#

;--solution--;
(define (eval-let exp env)
  (eval (caddr exp)                                            ;eval body
        (extend-env-with-new-frame                                       ;create new environment for let section
          (map first (cadr exp))                               ;variables              
          (map (lambda (clause)                                ;values 
                    (eval (cadr clause) env))
                (cadr exp))
            env)                                               ;parent env
   )             
 )  


;#|
;The code for the full meta-circular evaluator can be found here: MC-Eval Code in text form. Notice that we've added the following definitions
;   (define (cond? exp) (tagged-list? exp 'cond))
;   (define (cond-clauses exp) (cdr exp))
;and included the following clause in the eval definition:
;   ((cond? exp) (eval (cond->if exp) env))
;Your job is to write the procedure cond->if, which takes a cond expression as input and returns an equivalent expression with nested ifs. This is an example of a syntactic transformation.
;
;You may assume that a cond expression has the form
;
;    (cond  (c1 e1)
;           (c2 e2)
;            ...
;           (cn en))
;This is a simplified version of the cond expression in real Scheme. There are only two expressions in each clause (the condition and a single expression that is to be evaluated if the condition is true), and there is no special else case. Remember that your resulting expression must evaluate at most one of the e1 ... en expressions. If none of the c1 ... cn expressions evaluates to #t, it should just return #f. 
;Hint 0: Use a helper procedure to handle the loop through the clauses of the cond.
;|#

(define (cond->if exp)                             ;EX:  (cond->if '(cond ((> a b) 'ok)))
      (cond-clauses->if (cdr exp)))


(define (cond-clauses->if body)
  (if (null? body)
      #f
      (list 'if
            (first (car body))
            (second (car body))
            (cond-clauses->if (cdr body)))))


;#|
;The code for the meta-circular evaluator can be found here: MC-Eval Code in text form. Notice that we've added the following definitions
;   (define (until? exp) (tagged-list? exp 'until))
;   (define (until-test exp) (cadr exp))
;   (define (until-body exp) (cddr exp))
;and included the following clause in the eval definition:
;   ((until? exp) (eval-until exp env))
;Your job is to write the procedure eval-until.
;
;An until expression should have the following behavior. The test clause should be evaluated first. If it is true, return the value #t. If it is not true, then evaluate the body of the until expression, and iterate through this cycle again. Continue until the test is true. Assume that the body of the until is a sequence of expressions, not necessarily a single expression. 
;Hint 0: Remember that the body is a sequence of expressions (look carefully at the definition for until-body).
;|#

;Test case is: (eval '(begin
;         (define i 0)
;         (until (> i 3) (set! i (+ i 1)))
;         i)
;      the-global-environment)


(define (eval-until exp env)
  (if (< (length exp) 2) 'error                                           ;check the expression form is right for minimum situation
      (until-helper (until-test exp) (until-body exp) env)))

(define (until-helper test body env)
  (eval-sequence body env)
  (if (eval test env)
      #t                                                                     ;true, return value
      (until-helper test body env)))                                         ;if false, keep evaluate
             


